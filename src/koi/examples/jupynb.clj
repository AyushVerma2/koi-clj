(ns koi.examples.jupynb
  (:require [clj-docker-client.core :as docker]
            [clojure.java.shell :as shell :only [sh]]
            [starfish.core :as s]
            [taoensso.timbre :as timbre
             :refer [log  trace  debug  info  warn  error  fatal  report
                     logf tracef debugf infof warnf errorf fatalf reportf
                     spy get-env]]
            [clojure.java.io :as io])
  (:import [sg.dex.starfish.impl.file FileAsset]))



;;doesn't bind the volume
#_(with-open [conn (docker/connect)]
  (let [id (docker/run conn "kaggle/python"
             "jupyter nbconvert --to notebook --inplace --execute test.ipynb"
             {"--volume" "/tmp/working:/tmp/working"
              :working-dir "/tmp/working" }
             {8888 8888})]
    (docker/logs conn id))
  )

;;docker run -v /tmp/working:/tmp/working -w=/tmp/working -p 8888:8888 --rm kaggle/python jupyter nbconvert --to notebook --inplace --execute test.ipynb

(defn run-notebook
  "Runs a notebook.
  This operation takes the following arguments:
  notebook: A Starfish asset, the content of which is a jupyter notebook
  notebook-name: the name of the notebook (e.g. train_models.ipynb)
  input-asset: A starfish asset, the content of which is used by the notebook.
  input-asset-name: the file name of the input asset. The content of which is
   usually read by the notebook (e.g. pd.read_csv(\"train.csv\"))
  result-asset-name: the name of the file generated by the notebook. This is
    read by the container and returned as a Starfish asset"
  [{:keys [notebook input-asset
           notebook-name input-asset-name
           result-asset-name ]}]
  (let [local-path "/tmp/working/"
        ;;create the working directory if it doesn't exist
        _ (when (and (.exists (io/file local-path))
                     (.isDirectory (io/file local-path)))
            (info " created /tmp/working directory")
            (io/make-parents (io/file (str local-path input-asset-name))))
        _ (io/copy
           (s/content-stream input-asset)
           (io/file (str local-path input-asset-name)))
        _ (io/copy
           (s/content-stream notebook)
           (io/file (str local-path notebook-name)))
        _ (info " copied file  " notebook-name " and " input-asset-name)
        result-key (keyword "output-file")
        {:keys [exit err out] :as sh-out}
        (shell/sh "docker" "run" "-v"
                  (str local-path ":" local-path)
                  (str "-w=" local-path)
                  "-p" "8888:8888"
                  "--rm"
                  "kaggle/python"
                  "jupyter"
                  "nbconvert"
                  "--to"
                  "notebook"
                  "--inplace"
                  "--execute"
                  notebook-name)]
    (if (= 0 exit)
      (let [res (s/asset (s/file-asset (io/file (str local-path "/" result-asset-name))))]
        (info " copied result asset " res)
        {result-key res})
      (throw (Exception. sh-out))))
  )
;(io/resource "train3.csv")
;;to run locally (without uploading assets to Surfer)
#_(let [ast-fn (fn[path]
               (s/asset (FileAsset/create (io/file path))))

      input-asset (ast-fn "/home/kiran/Downloads/train.csv")
      notebook (ast-fn "/home/kiran/Downloads/test.ipynb")
      input-asset-name "train.csv"
      notebook-name "test.ipynb"
      result-asset-name "train2.csv"]
  (run-notebook {:input-asset input-asset
                 :notebook notebook
                 :notebook-name notebook-name
                 :input-asset-name input-asset-name
                 :result-asset-name result-asset-name}))


